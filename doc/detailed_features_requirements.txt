Transaction Example: We use a transaction to create a company and location before creating a job (required by FK). Then, we execute and commit the transaction.

with conn.cursor() as cursor:
            conn.autocommit = False

            select_company_query = "SELECT CompanyName FROM Company WHERE CompanyName = %s;"
            cursor.execute(select_company_query, (company_name,))
            existing_company = cursor.fetchone()

            if not existing_company:
                insert_company_query = "INSERT INTO Company (CompanyName) VALUES (%s);"
                cursor.execute(insert_company_query, (company_name,))

            insert_location_query = """
                INSERT INTO Location (City, State, ZipCode)
                VALUES (%s, %s, %s)
                ON DUPLICATE KEY UPDATE LocationId=LAST_INSERT_ID(LocationId);
            """
            cursor.execute(insert_location_query, (city, state, zip_code))
            location_id = cursor.lastrowid

            # Insert the Job record
            insert_job_query = """
                INSERT INTO Job (CompanyName, JobRole, LocationId, Description)
                VALUES (%s, %s, %s, %s);
            """
            cursor.execute(insert_job_query, (company_name, job_role, location_id, description))

            conn.commit()

Stored Procedure: We created a stored procedure that registers new users.

DELIMITER $$
CREATE PROCEDURE RegisterNewUserAdvanced(
    IN p_FirstName VARCHAR(100),
    IN p_LastName VARCHAR(100),
    IN p_Email VARCHAR(255),
    IN p_Password VARCHAR(255),
    IN p_Resume TEXT
)
BEGIN
    DECLARE v_count INT DEFAULT 0;
    DECLARE v_newUserId INT DEFAULT NULL;

    SELECT COUNT(*) INTO v_count FROM User WHERE Email = p_Email;

    IF v_count > 0 THEN
        SELECT 'ERROR' AS Status, 'Email already in use' AS Message, NULL AS NewUserId, NULL AS SameLastNameCount, NULL AS TotalUsers;
    ELSE
        INSERT INTO User (FirstName, LastName, Email, Password, Resume)
        VALUES (p_FirstName, p_LastName, p_Email, p_Password, p_Resume);
        
        SET v_newUserId = LAST_INSERT_ID();

        SELECT COUNT(*) 
        INTO v_count
        FROM User
        WHERE LastName = p_LastName;

        SET @SameLastNameCount = v_count;

        SELECT COUNT(*) 
        INTO v_count
        FROM User;
        
        SELECT 
            'SUCCESS' AS Status, 
            CONCAT('Account created successfully for: ', p_Email) AS Message, 
            v_newUserId AS NewUserId,
            @SameLastNameCount AS SameLastNameCount,
            v_count AS TotalUsers;
    END IF;
END$$
DELIMITER ;

Triggers:

Created a trigger that logs new job entries into the JobLog table.

DELIMITER $$
CREATE TRIGGER LogJobInsertion
AFTER INSERT ON Job
FOR EACH ROW
BEGIN
    INSERT INTO JobLog (JobId, Action, ActionTime)
    VALUES (NEW.JobId, 'Job Created', NOW());
END$$
DELIMITER ;

Constraints: 

Constrains example:
-- User Table
CREATE TABLE User (
    UserId INT AUTO_INCREMENT PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Email VARCHAR(100) NOT NULL UNIQUE,
    Password VARCHAR(255) NOT NULL,
    Resume TEXT NOT NULL,
    ResumeEmbedding JSON,
    CHECK (Email LIKE '%_@__%.__%') -- Basic email format validation
);

Primary Key Constraints
Primary Keys uniquely identify each record within a table, preventing duplicate entries and ensuring accurate data retrieval.

User Table (User)

Primary Key: UserId
Purpose: Uniquely identifies each user, enabling precise user-specific operations like profile updates and account management.

Job Table (Job)
Primary Key: JobId
Purpose: Uniquely identifies each job listing, facilitating accurate job management and user interactions such as applications.

Company Table (Company)
Primary Key: CompanyName
Purpose: Ensures each company is uniquely identifiable, allowing correct association of jobs to their respective companies.

Location Table (Location)
Primary Key: LocationId
Purpose: Uniquely distinguishes each location, enabling precise mapping of jobs to specific cities, states, and zip codes.
Foreign Key Constraints
Foreign Keys establish relationships between tables, ensuring that references between records are valid and maintaining referential integrity.

Job Table (Job)
Foreign Keys:
CompanyName references Company(CompanyName)
LocationId references Location(LocationId)
Purpose:
CompanyName: Links each job to a specific company, ensuring that all job listings are associated with existing companies.
LocationId: Associates each job with a valid location, enabling accurate location-based job searches and visualizations.


Additional Constraints
Unique Constraints:
User.Email: Ensures each email address is unique, preventing duplicate user accounts.
Not Null Constraints:
Applied to essential fields like User.FirstName, Job.JobRole, and Location.State to ensure critical information is always provided.
Check Constraints:
Enforced valid data formats, such as ensuring Location.State contains only valid state abbreviations.

